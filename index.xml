<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rokett&#39;s musings</title>
    <link>https://rokett.github.io/</link>
    <description>Recent content on Rokett&#39;s musings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 27 Oct 2019 22:43:35 +0100</lastBuildDate>
    
	<atom:link href="https://rokett.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Accessing Websites Requiring TLS1.1 and above with PowerShell</title>
      <link>https://rokett.github.io/posts/accessing-websites-requiring-tls1.1-and-above-with-powershell/</link>
      <pubDate>Sun, 27 Oct 2019 22:43:35 +0100</pubDate>
      
      <guid>https://rokett.github.io/posts/accessing-websites-requiring-tls1.1-and-above-with-powershell/</guid>
      <description>PowerShell, or at least Windows PowerShell, is somewhat behind the times, because it is based on .Net 4.x, in terms of supporting newer encryption protocols when access secure websites. By default .Net 4.x only supports up to TLS 1.1, but PowerShell still seems to be locked to TLS 1.0.
So when attempting to either Invoke-WebRequest or Invoke-RestMethod you may receive an error message back saying The request was aborted: Could not create SSL/TLS secure channel.</description>
    </item>
    
    <item>
      <title>Access the internet with PowerShell behind NTLM proxy</title>
      <link>https://rokett.github.io/posts/access-the-internet-with-powershell-behind-ntlm-proxy/</link>
      <pubDate>Wed, 11 Sep 2019 21:14:32 +0000</pubDate>
      
      <guid>https://rokett.github.io/posts/access-the-internet-with-powershell-behind-ntlm-proxy/</guid>
      <description>When you&amp;rsquo;re behind a corporate proxy server which uses NTLM, you will probably find that PowerShell is unable to connect to the internet. Sometimes this will just silently fail, which sucks, and other times you&amp;rsquo;ll receive an error.
In order to prove there is a problem, try the following request.
Invoke-WebRequest -Uri https://www.google.com/  The problem happens because an NTLM proxy server expects that user credentials will be passed for authentication purposes.</description>
    </item>
    
    <item>
      <title>What exception types are available with PowerShell</title>
      <link>https://rokett.github.io/posts/what-exception-types-are-available-with-powershell/</link>
      <pubDate>Thu, 29 Dec 2016 15:19:59 +0000</pubDate>
      
      <guid>https://rokett.github.io/posts/what-exception-types-are-available-with-powershell/</guid>
      <description>Throwing exceptions when an error occurs is a useful way of providing context to whatever the problem is and therefore allowing the consumer to get meaning from the error. Ideally an exception would be accompanied with an exception type, but how do you know what exception types are available in PowerShell?
[System.AppDomain]::CurrentDomain.GetAssemblies() | ForEach-Object { Try { $_.GetExportedTypes() | Where-Object { $_.Fullname -match &#39;Exception&#39; } } Catch {} } | Sort-Object -Property FullName | Select-Object -Property FullName  The above code will output all of the available exception types for you to choose the most appropriate.</description>
    </item>
    
    <item>
      <title>Best Practices for securing access to KeePass</title>
      <link>https://rokett.github.io/posts/best-practices-for-securing-access-to-keepass/</link>
      <pubDate>Mon, 19 Dec 2016 22:24:32 +0000</pubDate>
      
      <guid>https://rokett.github.io/posts/best-practices-for-securing-access-to-keepass/</guid>
      <description>First things first&amp;hellip;.calling this article best practices may be a bit strong. This is more about the way I like to secure access to KeePass; I&amp;rsquo;m sure things could be done differently or better, but it works for my organisation.
KeePass is a great tool.
For teams, or individuals, needing to store passwords, and other data, in a truly secure way KeePass comes out on top. Unless unlocked with a master password, or a keyfile, or both, the information contained within the database is kept encrypted (using AES and Twofish) to secure it from prying eyes.</description>
    </item>
    
    <item>
      <title>Iterating over a PowerShell hashtable</title>
      <link>https://rokett.github.io/posts/iterating-over-a-powershell-hashtable/</link>
      <pubDate>Mon, 19 Dec 2016 22:23:46 +0000</pubDate>
      
      <guid>https://rokett.github.io/posts/iterating-over-a-powershell-hashtable/</guid>
      <description>Iterating over a PowerShell hashtable&amp;hellip;.it&amp;rsquo;s not as easy as a simple ForEach loop; a hashtable isn&amp;rsquo;t like an array.
So how do you iterate over a hashtable? It&amp;rsquo;s actually really easy as there is a method on the hashtable object called GetEnumerator(). Iterating a hashtable using the GetEnumerator() method sends each key/value pair to the pipeline.
$hashtable = @{ &#39;key1&#39; = &#39;value1&#39; &#39;key2&#39; = &#39;value2&#39; &#39;key3&#39; = &#39;value3&#39; } $hashtable.GetEnumerator() | ForEach-Object { Write-Host &amp;quot;$_.</description>
    </item>
    
    <item>
      <title>PowerShell performance and array manipulation</title>
      <link>https://rokett.github.io/posts/powershell-performance-and-array-manipulation/</link>
      <pubDate>Sat, 06 Aug 2016 23:24:36 +0100</pubDate>
      
      <guid>https://rokett.github.io/posts/powershell-performance-and-array-manipulation/</guid>
      <description>Let&amp;rsquo;s talk about array manipulation in PowerShell; specifically adding to an array within a loop.
You&amp;rsquo;re probably used to initialising the array like so; $arr = @() and then adding new entries to it from within a loop by $arr += $newEntry. That works but holy hell is it slow! Not only is it slow but it eats CPU and memory resources. Why? Well I&amp;rsquo;m no expert on the inner workings of PowerShell but it&amp;rsquo;s because arrays are not able to be changed in PowerShell.</description>
    </item>
    
    <item>
      <title>PowerShell performance and ForEach loops</title>
      <link>https://rokett.github.io/posts/powershell-performance-and-foreach-loops/</link>
      <pubDate>Sat, 06 Aug 2016 23:05:51 +0100</pubDate>
      
      <guid>https://rokett.github.io/posts/powershell-performance-and-foreach-loops/</guid>
      <description>PowerShell is a powerful beast; the pipeline is crazy clever in terms of acting on many objects at once with a single command, but unless you&amp;rsquo;re really trying to do a one-liner there are other faster ways of doing things.
Take the humble ForEach loop for example. The pipeline way of doing things is actually the slowest, whilst the more traditional programming way of doing things is much faster. How much faster?</description>
    </item>
    
    <item>
      <title>Using variables with Invoke-Command script block in PowerShell</title>
      <link>https://rokett.github.io/posts/using-variables-with-invoke-command-scriptblock-in-powershell/</link>
      <pubDate>Tue, 26 Jul 2016 21:25:07 +0100</pubDate>
      
      <guid>https://rokett.github.io/posts/using-variables-with-invoke-command-scriptblock-in-powershell/</guid>
      <description>The Invoke-Command PowerShell cmdlet is pretty handy. It allows you to run commands from your local system as if they were being run on a remote system. Here&amp;rsquo;s a simple example:
Get-Service -DisplayName &#39;Task Scheduler&#39;  This retrieves the Task Scheduler service. It runs locally on whichever computer you used the command from. But what if you wanted to get the Task Scheduler service on a remote computer?
Sure you could do this (which would run the command against the computer called server01):</description>
    </item>
    
    <item>
      <title>Using Travis CI to deploy this site</title>
      <link>https://rokett.github.io/posts/using-travis-ci-to-deploy-this-blog/</link>
      <pubDate>Sat, 23 Jul 2016 12:30:26 +0100</pubDate>
      
      <guid>https://rokett.github.io/posts/using-travis-ci-to-deploy-this-blog/</guid>
      <description>This site is hosted on GitHub Pages. I wanted to be able to just be concerned with writing articles and commiting them to the repository; I didn&amp;rsquo;t particularly want to have to build the site locally and then commit that to the master branch. That&amp;rsquo;s where Travis-CI came in.
Travis-CI is a continuous integration platform which can link into GitHub and take action based on commits to the repository. In essence my workflow is as follows:</description>
    </item>
    
    <item>
      <title>Creating PowerShell modules</title>
      <link>https://rokett.github.io/posts/creating-powershell-modules/</link>
      <pubDate>Wed, 20 Jul 2016 22:13:34 +0100</pubDate>
      
      <guid>https://rokett.github.io/posts/creating-powershell-modules/</guid>
      <description>What is the best way to structure a PowerShell module? Realistically there is no such thing, however I have a structure which works for me; it provides a standard which is followed within my organisation and covers any modules I create. Standard practices are good&amp;hellip;doing things differently each and every time makes understanding how something is working very difficult.
So what&amp;rsquo;s the structure?
Let&amp;rsquo;s look at that structure a bit more.</description>
    </item>
    
    <item>
      <title>IE compatibility modes</title>
      <link>https://rokett.github.io/posts/ie-compatibility-modes/</link>
      <pubDate>Wed, 20 Jul 2016 22:13:21 +0100</pubDate>
      
      <guid>https://rokett.github.io/posts/ie-compatibility-modes/</guid>
      <description>In order to support legacy websites or systems, those expecting IE6 for example (yes there are still a lot!), IE has the concept of compatibility modes. It is common within enterprises to ensure that sites running on the local domain run in compatibility mode as they would break if they didn&amp;rsquo;t. I say it&amp;rsquo;s common&amp;hellip;it is in organisations with legacy web based systems but it should be getting less common there as time moves on.</description>
    </item>
    
    <item>
      <title>Convert PowerShell objects to Javascript objects in vRealize Orchestrator</title>
      <link>https://rokett.github.io/posts/convert-powershell-objects-to-javascript-objects-in-vrealize-orchestrator/</link>
      <pubDate>Wed, 20 Jul 2016 22:13:03 +0100</pubDate>
      
      <guid>https://rokett.github.io/posts/convert-powershell-objects-to-javascript-objects-in-vrealize-orchestrator/</guid>
      <description>Question: What do PowerShell and vRealize Orchestrator have in common?
Answer: They&amp;rsquo;re both amazing tools for automation and orchestration.
PowerShell is fantastic for scripting tasks on Microsoft based products and it&amp;rsquo;s moving into the Configuration Management world with DSC; although the tooling leaves a lot to be desired at the moment.
vRO is a gem of a product, given away for free with vCenter, from VMware; I know&amp;hellip;who would have thought VMware would give something so great away for free.</description>
    </item>
    
    <item>
      <title>Why is the mic volume so low on Corsair H2100 headphones?</title>
      <link>https://rokett.github.io/posts/why-is-the-mic-volume-so-low-on-corsair-h2100-headphones/</link>
      <pubDate>Wed, 20 Jul 2016 21:33:35 +0100</pubDate>
      
      <guid>https://rokett.github.io/posts/why-is-the-mic-volume-so-low-on-corsair-h2100-headphones/</guid>
      <description>My new Corsair H2100 headset is amazing. It&amp;rsquo;s wireless and the sound is so immersive; so far above my previous cheap pair. The only problem is that the microphone volume is really low.
It doesn&amp;rsquo;t seem to matter how you have the headphones configured in the Corsair control panel, there is no way to boost the mic volume&amp;hellip;or is there?
It&amp;rsquo;s pretty simple really, I just needed to install an application called Equalizer APO.</description>
    </item>
    
  </channel>
</rss>